library(tidyverse)
library(dslabs)
data("gapminder")
tidy_data <- gapminder %>%
tidy_data <- gapminder %>%
+ filter(country %in& c("South_Korea", "Germany")) %>%
select(country, year, fertility)
filter(country %in& c("South_Korea", "Germany")) %>%
tidy_data <- gapminder %>%
tidy_data <- gapminder %>%
filter(country %in& c("South_Korea", "Germany")) %>%
tidy_data <- gapminder %>% filter(country %in& c("South_Korea", "Germany")) %>% select(country, year, fertility)
tidy_data <- gapminder %>% filter (country %in& c("South_Korea", "Germany")) %>% select(country, year, fertility)
tidy_data <- gapminder %>% filter (country %in% c("South_Korea", "Germany")) %>% select(country, year, fertility)
tidy_data <- gapminder %>%
+ filter (country %in% c("South_Korea", "Germany")) %>%
+ select(country, year, fertility)
tidy_data <- gapminder %>%
+ filter (country %in% c("South_Korea", "Germany")) %>%
+ select (country, year, fertility)
tidy_data <- gapminder %>%
+ filter (country %in% c("South_Korea", "Germany")) %>%
+ select (country, year, fertility)
tidy_data <- gapminder %>%
+ filter (country %in% c("South_Korea", "Germany")) %>%
+ select (country, year, fertility)
tidy_data <- gapminder %>%
+  filter (country %in% c("South_Korea", "Germany")) %>%
+  select (country, year, fertility)
tidy_data <- gapminder %>%
+  filter (country %in% c("South_Korea", "Germany")) %>%
+  select (country, year, fertility)
head(tidy_data)
tidy_data <- gapminder %>%
+  filter (country %in% c("South_Korea", "Germany")) %>%
+  select (country, year, fertility)
tidy_data <- gapminder %>%
filter (country %in% c("South_Korea", "Germany")) %>%
select (country, year, fertility)
head(tidy_data)
tidy_data %>%
ggplot(aes(year,fertility, color = country)) +
geom_point()
tidy_data <- gapminder %>%
filter (country %in% c("South Korea", "Germany")) %>%
select (country, year, fertility)
tidy_data %>%
ggplot(aes(year,fertility, color = country)) +
geom_point()
View(gapminder)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
wide_data
new_tidy <- wide_data %>% gather(year, fertility, '1960':'2015')
View(new_tidy)
View(new_tidy)
new_tidy <- wide_data %>% gather(year, fertility, -country)
head(new_tidy)
new_tidy <- wide_data %>% gather(year, fertility)
head(new_tidy)
new_tidy <- wide_data %>% gather(year, fertility, -country)
head(new_tidy)
source('~/Documents/Docs/Data Science/R/Projects/Tidy_data/tidy1.R', echo=TRUE)
class(new_tidy)
class(tidy_data)
class(new_tidy$year)
class(tidy_data$year)
new_tidy <- wide_data %>% gather(year, fertility, -country, convert = TRUE)
class(new_tidy$year)
new_tidy %>%
ggplot(aes(year,fertility, color = country)) +
geom_point()
#spread
new_tidy <- new_tidy %>% spread(year, fertility)
head(new_tidy)
#separate & unite
filename2 <- file.path(path, "life-expectancy-and-fertility-two-countries-example.csv")
raw_dat <- read_csv(filename2)
head(raw_dat)
dat <- raw_dat %>% gather(year, value, -country)
head(dat)
dat <- raw_dat %>% gather(key, value, -country)
head(dat)
dat %>% separate(key, c("year","variable_type", "_" )
head(dat)
dat %>% separate (key, c("year","variable_type"), "_" )
head(dat)
dat
dat <- dat %>% separate (key, c("year","variable_type"), "_" )
head(dat)
dat <- dat %>% separate (key, c("year","variable_type")) #same result as _ is by default
head(dat)
dat <- dat %>% separate (key, c("year","variable_type1","variable_type2")) #same result as _ is by default
dat <- raw_dat %>% gather(key, value, -country)
head(dat)
dat %>% separate (key, c("year","variable_type"), "_")
head(dat)
dat %>% separate (key, c("year","variable_type")) #same result as _ is by default
head(dat)
dat <- dat %>% separate (key, c("year","variable_type1","variable_type2")) #same result as _ is by default
head(dat)
dat <- dat %>% separate (key, c("year","variable_type1", sep = "_",  extra= "merge")) #same result as _ is by default
head(dat)
dat <- raw_dat %>% gather(key, value, -country)
dat <- dat %>% separate (key, c("year","variable_type1", sep = "_",  extra= "merge")) #same result as _ is by default
head(dat)
dat <- raw_dat %>% gather(key, value, -country)
dat %>% separate (key, c("year","variable_type1", sep = "_",  extra= "merge")) #same result as _ is by default
head(dat)
dat %>% separate (key, c("year","variable_type1"), sep = "_",  extra= "merge")) #same result as _ is by default
head(dat)
dat <- raw_dat %>% gather(key, value, -country)
head(dat)
dat %>% separate (key, c("year","variable_type"), "_")
head(dat)
dat %>% separate (key, c("year","variable_type1"), sep = "_",  extra= "merge")) #same result as _ is by default
head(dat)
dat %>% separate (key, c("year","variable_type1"), sep = "_",  extra= "merge") #same result as _ is by default
head(dat)
dat %>% separate (key, c("year","variable_type1"), sep = "_",  extra= "merge") #same result as _ is by default
dat %>% separate (key, c("year","variable_type1"), sep = "_",  extra= "merge") %>%
spread(variable_type1, value)
dat_final <- dat %>% separate (key, c("year","variable_type1"), sep = "_",  extra= "merge") %>%
spread(variable_type1, value)
head(dat_final)
data("murders")
head("murders")
data(murders)
head(murders)
data(polls_us_election_2016)
head(polls_us_election_2016)
head(results_us_election_2016)
View(results_us_election_2016)
View(murders)
tab <- left_join(murders, results_us_election_2016, by = "state")
tab
tab %>% ggplot(aes(population/10^6,electoral_votes,label = abb)) +
geom_point() +
geom_text_repel() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
tab %>% ggplot(aes(population/10^6,electoral_votes,label = abb)) +
geom_point() +
geom_text_repel() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
tab %>% ggplot(aes(population/10^6,electoral_votes,label = abb)) +
geom_point() +
geom_text() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
tab %>% ggplot(aes(population/10^6,electoral_votes,label = abb)) +
geom_point() +
geom_text(check_overlap = TRUE)
tab %>% ggplot(aes(population/10^6,electoral_votes,label = abb)) +
geom_point() +
geom_text()
tab %>% ggplot(aes(population/10^6,electoral_votes,label = abb)) +
geom_point() +
geom_text()
tab <- left_join(murders, results_us_election_2016, by = "state")
tab %>% ggplot(aes(population/10^6,electoral_votes,label = abb)) +
geom_point() +
geom_text()
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
tab %>% ggplot(aes(population/10^6,electoral_votes,label = abb)) +
geom_point() +
geom_text() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
tab %>% ggplot(aes(population/10^6,electoral_votes,label = abb)) +
geom_point() +
geom_text(check_overlap = TRUE) +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
tab1 <- slice(murders, 1:6) %>% select(state, population)
tab2 <- slice(results_us_election_2016, c(1:3, 5, 7:8)) %>% select(state, electoral_votes)
left_join(tab1, tab2)
left_join(tab1, tab2)
tab1
tab2
tab2 <- slice(results_us_election_2016, c(1:3, 5, 7:8)) %>% select(state, electoral_votes)
tab2
tab2 <- slice(results_us_election_2016, c(1:3, 5, 7:8)) %>%
select(state, electoral_votes) %>%
sort(state)
tab2 <- slice(results_us_election_2016, c(1:3, 5, 7:8)) %>%
select(state, electoral_votes) %>%
sort(results_us_election_2016$state)
tab2 <- slice(results_us_election_2016, c(1:3, 5, 7:8)) %>%
select(state, electoral_votes) %>%
sort(results_us_election_2016$state,decreasing = FALSE)
tab2 <- slice(results_us_election_2016, c(1:3, 5, 7:8)) %>%
select(state, electoral_votes) %>%
order(results_us_election_2016$state,decreasing = FALSE)
tab2 <- tab2[order(population$state),]
tab2 <- tab2[order(tab2$state),]
tab2
results_us_election_2016 <- results_us_election_2016[order(results_us_election_2016$state),]
results_us_election_2016
head(results_us_election_2016)
tab2 <- slice(results_us_election_2016, c(1:3, 5, 7:8)) %>%
select(state, electoral_votes)
left_join(tab1, tab2)
tab1 %>% left_join(tab2)
tab1 %>% right_join(tab2)
inner_join(tab1,tab2)
semi_join(tab1,tab2) #keeps part of the first table which info in the second
anti_join(tab1,tab2) #keeps elements of the first table which there is no info in the second
#BINDING
tab1 <- tab[, 1:3]
tab1
new_tab <- bind_cols(tab1, tab2, tab3)
#BINDING
tab1 <- tab[, 1:3]
tab2 <- tab[, 4:6]
tab3 <- tab[, 7:9]
new_tab <- bind_cols(tab1, tab2, tab3)
head(new_tab)
bind_rows(tab4,tab5)
tab4 <- tab[1:2,]
tab5 <- tab[3:4,]
bind_rows(tab4,tab5)
#SET OPERATORS
tab6 <- tab[1:5,]
tab7 <- tab[3:7,]
interaction(tab1,tab2)
head(interaction(tab1,tab2))
intersect(tab1,tab2)
intersect(tab6,tab7)
union(tab6,tab7)
setdiff(tab6,tab7)
setdiff(tab7,tab6)
setequal(tab6,tab7)
library(rvest)
url <- "https://en.wikipedia.org/wiki/Murder_in_the_United_States_by_state"
h <- read_html(url)
View(h)
class(h)
tab <- tab[[2]]
h
tab
tab <- tab[[1]]
tab
tab <- tab[[3]]
tab
tab <- tab[[2]]
tab <- tab[[2]]
tab <- h %>% html_nodes("table")
tab <- tab[[2]]
tab
tab <- h %>% html_nodes("table")
tab <- tab[[2]]
tab
tab <- tab %>% html_table
tab
class(tab)
r <- read_html("http://www.foodnetwork.com/recipes/alton-brown/guacamole-recipe-1940609")
recipe <- r %>% html_node(".o-AssetTitle__a-HeadlineText") %>% html_text()
prep_time <- r %>% html_node(".o-RecipeInfo__a-Description--Total") %>% html_text()
ingredients <- r %>% html_nodes(".o-Ingredients__a-ListItemText") %>% html_text()
guacamole <- list(recipe, prep_time, ingredients)
guacamole
ingredients <- r %>% html_nodes(".o-Ingredients") %>% html_text()
guacamole <- list(recipe, prep_time, ingredients)
guacamole
prep_time <- r %>% html_node(".m-RecipeInfo__a-Description--Total") %>% html_text()
guacamole <- list(recipe, prep_time, ingredients)
guacamole
get_recipe <- function(url){
m <- read_html(url)
recipe <- m %>% html_node(".o-AssetTitle__a-HeadlineText") %>% html_text()
prep_time <- m %>% html_node(".o-RecipeInfo__a-Description--Total") %>% html_text()
ingredients <- m %>% html_nodes(".o-Ingredients__a-ListItemText") %>% html_text()
return(list(recipe = recipe, prep_time = prep_time, ingredients = ingredients))
}
get_recipe("http://www.foodnetwork.com/recipes/food-network-kitchen/pancakes-recipe-1913844")
get_recipe <- function(url){
m <- read_html(url)
recipe <- m %>% html_node(".o-AssetTitle__a-HeadlineText") %>% html_text()
prep_time <- m %>% html_node(".m-RecipeInfo__a-Description--Total") %>% html_text()
ingredients <- m %>% html_nodes(".o-Ingredients") %>% html_text()
return(list(recipe = recipe, prep_time = prep_time, ingredients = ingredients))
}
get_recipe("http://www.foodnetwork.com/recipes/food-network-kitchen/pancakes-recipe-1913844")
get_recipe("https://www.foodnetwork.com/recipes/food-network-kitchen/spaghetti-squash-carbonara-4590186")
library(rvest)
url <- "https://en.wikipedia.org/wiki/Murder_in_the_United_States_by_state"
murders_raw <- read_html(url) %>%
html_nodes("table")  %>%
html_table()
murders_raw <- read_html(url) %>%
html_nodes("table")  %>%
html_table()
murders_raw
murders_raw
murders_raw <- murders_raw[[2]] %>%
setNames(c("state", "population", "total", "murders", "gun_murders", "gun_ownership", "total_rate", "murder_rate", "gun_murder_rate"))
head(murders_raw)
test1 <- str_replace_all(murders_raw$population, ",", "")
test1 <- as.numeric(test1)
identical(test1,test2)
test2 <- parse_number(murders_raw$population)
identical(test1,test2)
murders_raw
murders_new <- murders_raw %>% mutate_at(2:3, parse_number)
head(murders_new)
murders_new <- murders_raw %>% mutate_at(2:5, parse_number)
head(murders_new)
library(dslabs)
data(reported_heights)
x <- as.numeric(reported_heights$height)
sum(is.na(x))
reported_heights %>% mutate(new_height = as.numeric(heights)) %>%
filter(is.na(new_height)) %>%
head(n=10)
reported_heights %>% mutate(new_height = as.numeric(height)) %>%
filter(is.na(new_height)) %>%
head(n=10)
ind <- is.na(inches) | inches < smallest | inches > tallest
not_inches <- function(x, smallest = 50, tallest = 84){
inches <- supressWarnings(as.numeric(x))
ind <- is.na(inches) | inches < smallest | inches > tallest
ind
}
problems <- reported_heights %>%
filter(not_inches(height)) %>%
.$height
not_inches <- function(x, smallest = 50, tallest = 84){
#inches <- supressWarnings(as.numeric(x))
ind <- is.na(inches) | inches < smallest | inches > tallest
ind
}
problems <- reported_heights %>%
filter(not_inches(height)) %>%
.$height
not_inches <- function(x, smallest = 50, tallest = 84){
inches <- as.numeric(x) #supressWarnings(as.numeric(x))
ind <- is.na(inches) | inches < smallest | inches > tallest
ind
}
problems <- reported_heights %>%
filter(not_inches(height)) %>%
.$height
problems
#strings processing
str_subset(reported_heights$height, "cm")
#strings processing
str_subset(reported_heights$height, "inches")
#strings processing
str_subset(reported_heights$height, "feet")
View(reported_heights)
str_subset(s,"cm|inches")
yes <- c( "180 cm", "70 inches")
no <- c("180","70''")
s <- c(yes, no)
str_subset(s,"cm|inches")
str_detect(s,"cm|inches")
yes2 <- c("2","3","7")
no2 <- c("two", "three", "_")
s2 <- c(yes2, no2)
pattern <- "\\d"
str_detect(s2, pattern)
str_view(s2, pattern)
str_view(s2, pattern)
str_view(s, pattern)
str_view(s, pattern)
str_view_all(s2,pattern)
str_view(s,"[56]")
str_view(s, pattern)
str_view_all(s2,pattern)
str_view(s,"[56]")
str_view(s2, pattern)
yes3 <- as.character(4:7)
no3 <- as.character(1:3)
s3 <- c(yes3, no3)
str_detect(s,"[4-7]")
str_detect(s3,"[4-7]")
